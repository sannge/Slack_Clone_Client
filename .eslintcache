[{"/Users/sannge/Projects/slack/slack_clone_client/src/index.js":"1","/Users/sannge/Projects/slack/slack_clone_client/src/reportWebVitals.js":"2","/Users/sannge/Projects/slack/slack_clone_client/src/routes/index.js":"3","/Users/sannge/Projects/slack/slack_clone_client/src/routes/Home.js":"4","/Users/sannge/Projects/slack/slack_clone_client/src/routes/Register.js":"5","/Users/sannge/Projects/slack/slack_clone_client/src/routes/Login.js":"6","/Users/sannge/Projects/slack/slack_clone_client/src/routes/CreateTeam.js":"7","/Users/sannge/Projects/slack/slack_clone_client/src/routes/ViewTeam.js":"8","/Users/sannge/Projects/slack/slack_clone_client/src/components/Channels.js":"9","/Users/sannge/Projects/slack/slack_clone_client/src/components/Teams.js":"10","/Users/sannge/Projects/slack/slack_clone_client/src/components/Messages.js":"11","/Users/sannge/Projects/slack/slack_clone_client/src/components/Header.js":"12","/Users/sannge/Projects/slack/slack_clone_client/src/components/AppLayout.js":"13","/Users/sannge/Projects/slack/slack_clone_client/src/components/SendMessage.js":"14","/Users/sannge/Projects/slack/slack_clone_client/src/containers/SideBar.js":"15","/Users/sannge/Projects/slack/slack_clone_client/src/components/AddChannelModal.js":"16","/Users/sannge/Projects/slack/slack_clone_client/src/graphql/team.js":"17","/Users/sannge/Projects/slack/slack_clone_client/src/components/InvitePeopleModal.js":"18","/Users/sannge/Projects/slack/slack_clone_client/src/normalizeErrors.js":"19","/Users/sannge/Projects/slack/slack_clone_client/src/containers/MessageContainer.js":"20","/Users/sannge/Projects/slack/slack_clone_client/src/apolloClient.js":"21","/Users/sannge/Projects/slack/slack_clone_client/src/ApolloClient.js":"22","/Users/sannge/Projects/slack/slack_clone_client/src/graphql/message.js":"23","/Users/sannge/Projects/slack/slack_clone_client/src/routes/DirectMessages.js":"24","/Users/sannge/Projects/slack/slack_clone_client/src/containers/DirectMessageContainer.js":"25","/Users/sannge/Projects/slack/slack_clone_client/src/components/DirectMessageModal.js":"26","/Users/sannge/Projects/slack/slack_clone_client/src/components/Loading.js":"27"},{"size":656,"mtime":1611883443129,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":1611039326458,"results":"30","hashOfConfig":"29"},{"size":1393,"mtime":1612227481523,"results":"31","hashOfConfig":"29"},{"size":360,"mtime":1611045660341,"results":"32","hashOfConfig":"29"},{"size":2838,"mtime":1612243482269,"results":"33","hashOfConfig":"29"},{"size":2805,"mtime":1612247406810,"results":"34","hashOfConfig":"29"},{"size":2512,"mtime":1611524927913,"results":"35","hashOfConfig":"29"},{"size":2283,"mtime":1612219977388,"results":"36","hashOfConfig":"29"},{"size":3366,"mtime":1612246977426,"results":"37","hashOfConfig":"29"},{"size":1588,"mtime":1612245701362,"results":"38","hashOfConfig":"29"},{"size":223,"mtime":1611872952069,"results":"39","hashOfConfig":"29"},{"size":310,"mtime":1611429734123,"results":"40","hashOfConfig":"29"},{"size":180,"mtime":1611428616763,"results":"41","hashOfConfig":"29"},{"size":1439,"mtime":1612081163456,"results":"42","hashOfConfig":"29"},{"size":2347,"mtime":1612220109266,"results":"43","hashOfConfig":"29"},{"size":3469,"mtime":1612243799779,"results":"44","hashOfConfig":"29"},{"size":392,"mtime":1612218571448,"results":"45","hashOfConfig":"29"},{"size":2884,"mtime":1612244878907,"results":"46","hashOfConfig":"29"},{"size":185,"mtime":1611721970402,"results":"47","hashOfConfig":"29"},{"size":2714,"mtime":1612248139997,"results":"48","hashOfConfig":"29"},{"size":1894,"mtime":1611883634567,"results":"49","hashOfConfig":"29"},{"size":1987,"mtime":1611908795764,"results":"50","hashOfConfig":"29"},{"size":1040,"mtime":1612235718798,"results":"51","hashOfConfig":"29"},{"size":3912,"mtime":1612235837918,"results":"52","hashOfConfig":"29"},{"size":2711,"mtime":1612248125323,"results":"53","hashOfConfig":"29"},{"size":2198,"mtime":1612229111930,"results":"54","hashOfConfig":"29"},{"size":205,"mtime":1612247970313,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1eujft4",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sannge/Projects/slack/slack_clone_client/src/index.js",[],["119","120"],"/Users/sannge/Projects/slack/slack_clone_client/src/reportWebVitals.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/routes/index.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/routes/Home.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/routes/Register.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/routes/Login.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/routes/CreateTeam.js",["121"],"import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { extendObservable } from \"mobx\";\nimport {\n\tMessage,\n\tForm,\n\tContainer,\n\tHeader,\n\tInput,\n\tButton,\n} from \"semantic-ui-react\";\nimport { gql } from \"@apollo/client\";\nimport { graphql } from \"@apollo/client/react/hoc\";\nimport { Redirect } from \"react-router-dom\";\n\nclass CreateTeam extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\textendObservable(this, {\n\t\t\tname: \"\",\n\t\t\terrors: {},\n\t\t});\n\t}\n\n\tonChange = (e) => {\n\t\tconst { name, value } = e.target;\n\t\tthis[name] = value;\n\t};\n\n\tonSubmit = async () => {\n\t\tthis.errors = {};\n\t\tconst { name } = this;\n\t\tlet response = null;\n\n\t\ttry {\n\t\t\tresponse = await this.props.mutate({\n\t\t\t\tvariables: { name },\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tthis.props.history.push(\"/login\");\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.log(response);\n\n\t\t// console.log(this.props.data.networkStatus);\n\n\t\tconst { ok, errors, team } = response.data.createTeam;\n\t\tif (ok) {\n\t\t\tconsole.log(\"OKOK\");\n\t\t\tconsole.log(this.props.history);\n\t\t\tthis.props.history.push(`/view-team/${team.id}`);\n\t\t} else {\n\t\t\tconst err = {};\n\t\t\terrors.forEach(({ path, message }) => {\n\t\t\t\terr[`${path}Error`] = message;\n\t\t\t});\n\n\t\t\tthis.errors = { ...err };\n\t\t}\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\tname,\n\t\t\terrors: { nameError },\n\t\t} = this;\n\n\t\tconst errorList = [];\n\n\t\tif (nameError) {\n\t\t\terrorList.push(nameError);\n\t\t}\n\n\t\treturn (\n\t\t\t<Container text>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\t\tpadding: \"40px\",\n\t\t\t\t\t}}>\n\t\t\t\t\t<Header as='h1'>Create a Team</Header>\n\t\t\t\t</div>\n\t\t\t\t{/* {usernameError || emailError || passwordError ? (\n\t\t\t\t\t\t<Message\n\t\t\t\t\t\t\terror\n\t\t\t\t\t\t\theader={\"There was some errors with your submission\"}\n\t\t\t\t\t\t\tlist={errorList}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null} */}\n\t\t\t\t{errorList.length > 0 && (\n\t\t\t\t\t<Message\n\t\t\t\t\t\terror\n\t\t\t\t\t\theader={\"There was some errors with your submission\"}\n\t\t\t\t\t\tlist={errorList}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<Form>\n\t\t\t\t\t<Form.Field error={!!nameError}>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\t\t\tname='name'\n\t\t\t\t\t\t\tfluid\n\t\t\t\t\t\t\tplaceholder='Name'\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Field>\n\n\t\t\t\t\t<Button size='big' fluid color='twitter' onClick={this.onSubmit}>\n\t\t\t\t\t\tCreate\n\t\t\t\t\t</Button>\n\t\t\t\t</Form>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nconst CREATE_TEAM = gql`\n\tmutation createTeam($name: String!) {\n\t\tcreateTeam(name: $name) {\n\t\t\tok\n\t\t\tteam {\n\t\t\t\tid\n\t\t\t}\n\t\t\terrors {\n\t\t\t\tpath\n\t\t\t\tmessage\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport default graphql(CREATE_TEAM)(observer(CreateTeam));\n","/Users/sannge/Projects/slack/slack_clone_client/src/routes/ViewTeam.js",["122","123","124"],"import React from \"react\";\nimport Channels from \"../components/Channels\";\nimport Teams from \"../components/Teams\";\nimport Header from \"../components/Header\";\nimport SendMessage from \"../components/SendMessage\";\nimport Messages from \"../components/Messages\";\nimport AppLayout from \"../components/AppLayout\";\nimport Sidebar from \"../containers/SideBar\";\nimport MessageContainer from \"../containers/MessageContainer\";\n\nimport { graphql } from \"@apollo/client/react/hoc\";\n\nimport { useMutation } from \"@apollo/client\";\n\nimport { ME_QUERY } from \"../graphql/team\";\n\nimport findIndex from \"lodash/findIndex\";\nimport { SEND_MESSAGE } from \"../graphql/message\";\n\nfunction ViewTeam({\n\tdata: { loading, me, error },\n\thistory,\n\tmatch: {\n\t\tparams: { teamId, channelId },\n\t},\n}) {\n\tconst [createMessage] = useMutation(SEND_MESSAGE);\n\n\tif (loading) {\n\t\treturn null;\n\t}\n\tif (error) {\n\t\tconsole.log(error);\n\t}\n\n\tconst { teams: allTeams, username } = me;\n\n\tlet teamIdx = teamId\n\t\t? findIndex(allTeams, [\"id\", parseInt(teamId, 10)])\n\t\t: history.push(`/view-team/${allTeams[0].id}`);\n\t// if (teamIdx === 0) {\n\t// \thistory.push(`/view-team/${allTeams[0].id}`);\n\t// }\n\tif (!teamIdx) teamIdx = 0;\n\n\tif (teamIdx === -1) {\n\t\tteamIdx = 0;\n\t\thistory.push(`/view-team/${allTeams[0].id}`);\n\t}\n\tconst team = allTeams[teamIdx];\n\n\tlet channelIdx = channelId\n\t\t? findIndex(team.channels, [\"id\", parseInt(channelId, 10)])\n\t\t: 0;\n\tif (channelIdx === -1) {\n\t\tchannelIdx = 0;\n\t\thistory.push(\n\t\t\t`/view-team/${allTeams[0].id}/${team.channels[channelIdx].id}`\n\t\t);\n\t}\n\tconst channel = team.channels[channelIdx];\n\n\treturn (\n\t\t<AppLayout>\n\t\t\t<Sidebar\n\t\t\t\tteams={allTeams.map((t) => ({\n\t\t\t\t\tid: t.id,\n\t\t\t\t\tadmin: t.admin,\n\t\t\t\t\tletter: t.name.charAt(0).toUpperCase(),\n\t\t\t\t}))}\n\t\t\t\tallTeams={allTeams}\n\t\t\t\tteam={team}\n\t\t\t\tcurrentTeamId={teamId}\n\t\t\t\tusername={username}\n\t\t\t/>\n\t\t\t{channel && <Header channelName={channel.name} />}\n\t\t\t{channel && (\n\t\t\t\t<>\n\t\t\t\t\t<MessageContainer channelId={channel.id} />\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t{channel && (\n\t\t\t\t<SendMessage\n\t\t\t\t\tplaceholder={channel.name}\n\t\t\t\t\tonSubmit={async (text) => {\n\t\t\t\t\t\tawait createMessage({ variables: { text, channelId: channel.id } });\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</AppLayout>\n\t);\n}\n\nexport default graphql(ME_QUERY, { options: { fetchPolicy: \"network-only\" } })(\n\tViewTeam\n);\n","/Users/sannge/Projects/slack/slack_clone_client/src/components/Channels.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/components/Teams.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/components/Messages.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/components/Header.js",["125"],"import styled from \"styled-components\";\nimport React from \"react\";\nimport { Header } from \"semantic-ui-react\";\n\nconst HeaderWrapper = styled.div`\n\tgrid-column: 3;\n\tgrid-row: 1;\n`;\n\nexport default ({ channelName }) => (\n\t<HeaderWrapper>\n\t\t<Header textAlign='center'>#{channelName}</Header>\n\t</HeaderWrapper>\n);\n","/Users/sannge/Projects/slack/slack_clone_client/src/components/AppLayout.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/components/SendMessage.js",["126","127"],"import styled from \"styled-components\";\nimport { Input, Form } from \"semantic-ui-react\";\nimport React from \"react\";\n\nimport { Formik } from \"formik\";\nimport { gql } from \"@apollo/client\";\nimport { graphql } from \"@apollo/client/react/hoc\";\n\nconst SendMessageWrapper = styled.div`\n\tgrid-column: 3;\n\tgrid-row: 3;\n\tmargin: 20px;\n`;\n\nconst ENTER_KEY = 13;\n\nconst SendMessage = ({ placeholder, onSubmit }) => (\n\t<SendMessageWrapper>\n\t\t<Formik\n\t\t\tinitialValues={{ message: \"\" }}\n\t\t\tonSubmit={async (values, { setSubmitting, resetForm }) => {\n\t\t\t\tif (!values.message || !values.message.trim()) {\n\t\t\t\t\tsetSubmitting(false);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tawait onSubmit(values.message);\n\t\t\t\t\t// await mutate({\n\t\t\t\t\t// \tvariables: { channelId, text: values.message },\n\t\t\t\t\t// });\n\t\t\t\t\tresetForm();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t}\n\t\t\t}}>\n\t\t\t{({\n\t\t\t\tvalues,\n\t\t\t\terrors,\n\t\t\t\ttouched,\n\t\t\t\thandleChange,\n\t\t\t\thandleBlur,\n\t\t\t\thandleSubmit,\n\t\t\t\tisSubmitting,\n\t\t\t\t/* and other goodies */\n\t\t\t}) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Form>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\t\t\tif (e.keyCode === ENTER_KEY && !isSubmitting) {\n\t\t\t\t\t\t\t\t\thandleSubmit(e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tname='message'\n\t\t\t\t\t\t\tonBlur={handleBlur}\n\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\tvalue={values.message}\n\t\t\t\t\t\t\tfluid\n\t\t\t\t\t\t\tplaceholder={`Message #${placeholder}`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form>\n\t\t\t\t);\n\t\t\t}}\n\t\t</Formik>\n\t</SendMessageWrapper>\n);\nexport default SendMessage;\n","/Users/sannge/Projects/slack/slack_clone_client/src/containers/SideBar.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/components/AddChannelModal.js",["128"],"import React from \"react\";\nimport { Form, Input, Modal, Button } from \"semantic-ui-react\";\nimport { Formik } from \"formik\";\nimport { gql } from \"@apollo/client\";\nimport { graphql } from \"@apollo/client/react/hoc\";\nimport { ME_QUERY } from \"../graphql/team\";\nimport normalizeErrors from \"../normalizeErrors\";\n\nfunction AddChannelModal({ open, onCloseAddChannelClick, teamId, mutate }) {\n\treturn (\n\t\t<Modal open={open} onClose={onCloseAddChannelClick}>\n\t\t\t<Modal.Header>Add Channel</Modal.Header>\n\t\t\t<Modal.Content>\n\t\t\t\t<Formik\n\t\t\t\t\tinitialValues={{ name: \"\" }}\n\t\t\t\t\tonSubmit={async (values, { setSubmitting }) => {\n\t\t\t\t\t\tlet response;\n\t\t\t\t\t\tif (values.name.trim() === \"\") {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = await mutate({\n\t\t\t\t\t\t\t\tvariables: { teamId: parseInt(teamId), name: values.name },\n\t\t\t\t\t\t\t\tupdate: (store, { data: { createChannel } }) => {\n\t\t\t\t\t\t\t\t\tconst { ok, channel } = createChannel;\n\t\t\t\t\t\t\t\t\tif (!ok) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconst dataCopy = {\n\t\t\t\t\t\t\t\t\t\t...store.readQuery({ query: ME_QUERY }),\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tconsole.log(dataCopy);\n\n\t\t\t\t\t\t\t\t\tconst teamIdx = dataCopy.me.teams.findIndex(\n\t\t\t\t\t\t\t\t\t\t(team) => team.id === parseInt(teamId)\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tconst meCopy = { ...dataCopy.me };\n\t\t\t\t\t\t\t\t\tconst allTeamsCopy = [...meCopy.teams];\n\t\t\t\t\t\t\t\t\tlet teamCopy = { ...allTeamsCopy[teamIdx] };\n\t\t\t\t\t\t\t\t\tconst channelsCopy = [...teamCopy.channels];\n\t\t\t\t\t\t\t\t\tchannelsCopy.push(channel);\n\n\t\t\t\t\t\t\t\t\tteamCopy.channels = channelsCopy;\n\t\t\t\t\t\t\t\t\tallTeamsCopy[teamIdx] = teamCopy;\n\t\t\t\t\t\t\t\t\tmeCopy.teams = allTeamsCopy;\n\t\t\t\t\t\t\t\t\tdataCopy.me = meCopy;\n\n\t\t\t\t\t\t\t\t\tstore.writeQuery({\n\t\t\t\t\t\t\t\t\t\tquery: ME_QUERY,\n\t\t\t\t\t\t\t\t\t\tdata: dataCopy,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t// data.comments.push(submitComment);\n\t\t\t\t\t\t\t\t\t// store.writeQuery({ query: CommentAppQuery, data });\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (response) {\n\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\tcreateChannel: { ok },\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t} = response;\n\t\t\t\t\t\t\t\tif (!ok) {\n\t\t\t\t\t\t\t\t\t// errors.name = normalizeErrors(error)[0];\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tonCloseAddChannelClick();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tvalues.name = \"\";\n\t\t\t\t\t\t\tconsole.log(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsetSubmitting(false);\n\t\t\t\t\t}}>\n\t\t\t\t\t{({\n\t\t\t\t\t\tvalues,\n\t\t\t\t\t\terrors,\n\t\t\t\t\t\ttouched,\n\t\t\t\t\t\thandleChange,\n\t\t\t\t\t\thandleBlur,\n\t\t\t\t\t\thandleSubmit,\n\t\t\t\t\t\tisSubmitting,\n\n\t\t\t\t\t\t/* and other goodies */\n\t\t\t\t\t}) => (\n\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t{console.log(errors.name)}\n\n\t\t\t\t\t\t\t<Form.Field>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tvalue={values.name}\n\t\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\t\tonBlur={handleBlur}\n\t\t\t\t\t\t\t\t\tname='name'\n\t\t\t\t\t\t\t\t\tfluid\n\t\t\t\t\t\t\t\t\tplaceholder='Type a Channel Name'\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Form.Field>\n\t\t\t\t\t\t\t<Form.Field\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\t\t\t\t\tjustifyContent: \"center\",\n\t\t\t\t\t\t\t\t\talignItems: \"center\",\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tdisabled={isSubmitting}\n\t\t\t\t\t\t\t\t\tonClick={onCloseAddChannelClick}\n\t\t\t\t\t\t\t\t\tcolor='red'\n\t\t\t\t\t\t\t\t\tfluid>\n\t\t\t\t\t\t\t\t\tCancel\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\t\t\t\tdisabled={isSubmitting}\n\t\t\t\t\t\t\t\t\tfluid>\n\t\t\t\t\t\t\t\t\tCreate Channel\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Form.Field>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t)}\n\t\t\t\t</Formik>\n\t\t\t</Modal.Content>\n\t\t</Modal>\n\t);\n}\n\nconst CREATE_CHANNEL = gql`\n\tmutation createChannel($teamId: Int!, $name: String!) {\n\t\tcreateChannel(teamId: $teamId, name: $name) {\n\t\t\tok\n\t\t\tchannel {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport default graphql(CREATE_CHANNEL)(AddChannelModal);\n","/Users/sannge/Projects/slack/slack_clone_client/src/graphql/team.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/components/InvitePeopleModal.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/normalizeErrors.js",["129"],"export default (errors) =>\n\terrors.reduce((acc, cv) => {\n\t\tif (cv.path in acc) {\n\t\t\tacc[cv.path].push(cv.message);\n\t\t} else {\n\t\t\tacc[cv.path] = [cv.message];\n\t\t}\n\t\treturn acc;\n\t}, {});\n","/Users/sannge/Projects/slack/slack_clone_client/src/containers/MessageContainer.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/apolloClient.js",["130"],"/Users/sannge/Projects/slack/slack_clone_client/src/ApolloClient.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/graphql/message.js",[],"/Users/sannge/Projects/slack/slack_clone_client/src/routes/DirectMessages.js",["131","132","133","134"],"import React from \"react\";\nimport Channels from \"../components/Channels\";\nimport Teams from \"../components/Teams\";\nimport Header from \"../components/Header\";\nimport SendMessage from \"../components/SendMessage\";\nimport Messages from \"../components/Messages\";\nimport AppLayout from \"../components/AppLayout\";\nimport Sidebar from \"../containers/SideBar\";\nimport DirectMessageContainer from \"../containers/DirectMessageContainer\";\n\nimport { graphql } from \"@apollo/client/react/hoc\";\n\nimport { ME_QUERY } from \"../graphql/team\";\n\nimport { useMutation, gql } from \"@apollo/client\";\n\nimport findIndex from \"lodash/findIndex\";\nimport { CREATE_DIRECT_MESSAGE } from \"../graphql/message\";\n\nfunction DirectMessages({\n\tdata: { loading, me, getUser, error },\n\thistory,\n\tmatch: {\n\t\tparams: { teamId, userId },\n\t},\n}) {\n\tconst [createDirectMessage] = useMutation(CREATE_DIRECT_MESSAGE, {\n\t\tupdate: (store) => {\n\t\t\tconst dataCopy = {\n\t\t\t\t...store.readQuery({ query: ME_QUERY }),\n\t\t\t};\n\t\t\tconst data = store.readQuery({ query: ME_QUERY });\n\n\t\t\tconsole.log(\"DATA::: \", data);\n\n\t\t\tconst teamIdx = dataCopy.me.teams.findIndex(\n\t\t\t\t(team) => team.id === parseInt(teamId)\n\t\t\t);\n\n\t\t\tconst meCopy = { ...dataCopy.me };\n\t\t\tconst allTeamsCopy = [...meCopy.teams];\n\t\t\tconst teamIdx2 = findIndex(allTeamsCopy, [\"id\", team.id]);\n\t\t\tlet teamCopy = { ...allTeamsCopy[teamIdx2] };\n\t\t\tconst directMessageMembersCopy = [...teamCopy.directMessageMembers];\n\n\t\t\tconst notAlreadyThere = directMessageMembersCopy.every(\n\t\t\t\t(member) => member.id !== parseInt(userId, 10)\n\t\t\t);\n\t\t\tif (notAlreadyThere) {\n\t\t\t\tdirectMessageMembersCopy.push({\n\t\t\t\t\t__typename: \"User\",\n\t\t\t\t\tid: userId,\n\t\t\t\t\tusername: getUser.username,\n\t\t\t\t});\n\n\t\t\t\tteamCopy.directMessageMembers = directMessageMembersCopy;\n\t\t\t\tallTeamsCopy[teamIdx2] = teamCopy;\n\t\t\t\tmeCopy.teams = allTeamsCopy;\n\t\t\t\tdataCopy.me = meCopy;\n\t\t\t\tconsole.log(dataCopy);\n\t\t\t\tstore.writeQuery({ query: ME_QUERY, data: dataCopy });\n\t\t\t}\n\t\t},\n\t});\n\n\tif (loading) {\n\t\treturn null;\n\t}\n\tif (error) {\n\t\tconsole.log(error);\n\t}\n\n\tconst { teams: allTeams, username } = me;\n\n\tlet teamIdx = teamId\n\t\t? findIndex(allTeams, [\"id\", parseInt(teamId, 10)])\n\t\t: history.push(`/view-team/${allTeams[0].id}`);\n\t// if (teamIdx === 0) {\n\t// \thistory.push(`/view-team/${allTeams[0].id}`);\n\t// }\n\tif (!teamIdx) teamIdx = 0;\n\n\tif (teamIdx === -1) {\n\t\tteamIdx = 0;\n\t\thistory.push(`/view-team/${allTeams[0].id}`);\n\t}\n\tconst team = allTeams[teamIdx];\n\n\tlet userIdExists = false;\n\tteam?.directMessageMembers.forEach((m) => {\n\t\tif (m.id === userId) {\n\t\t\tuserIdExists = true;\n\t\t\treturn;\n\t\t}\n\t});\n\n\tif (!parseInt(userId) || userIdExists) {\n\t\t// if (teamMemberCount === 0) {\n\n\t\t// } else {\n\t\t// \thistory.push(\n\t\t// \t\t`/view-team/user/${team?.id}/${team?.directMessageMembers[0].id}`\n\t\t// \t);\n\t\t// }\n\t\thistory.push(`/view-team/user/${team?.id}`);\n\t}\n\n\treturn (\n\t\t<AppLayout>\n\t\t\t<Sidebar\n\t\t\t\tteams={allTeams.map((t) => ({\n\t\t\t\t\tid: t.id,\n\t\t\t\t\tadmin: t.admin,\n\t\t\t\t\tletter: t.name.charAt(0).toUpperCase(),\n\t\t\t\t}))}\n\t\t\t\tallTeams={allTeams}\n\t\t\t\tteam={team}\n\t\t\t\tcurrentTeamId={teamId}\n\t\t\t\tusername={username}\n\t\t\t/>\n\t\t\t<Header channelName={getUser.username} />\n\t\t\t<DirectMessageContainer teamId={teamId} userId={userId} />\n\t\t\t<SendMessage\n\t\t\t\tonSubmit={async (text) => {\n\t\t\t\t\tawait createDirectMessage({\n\t\t\t\t\t\tvariables: {\n\t\t\t\t\t\t\tteamId: parseInt(teamId),\n\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\treceiverId: parseInt(userId),\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t\tplaceholder={userId}\n\t\t\t/>\n\t\t</AppLayout>\n\t);\n}\n\nconst directMessageMeQuery = gql`\n\tquery($userId: Int!) {\n\t\tgetUser(userId: $userId) {\n\t\t\tusername\n\t\t}\n\n\t\tme {\n\t\t\tid\n\t\t\tusername\n\t\t\tteams {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tadmin\n\t\t\t\tdirectMessageMembers {\n\t\t\t\t\tid\n\t\t\t\t\tusername\n\t\t\t\t}\n\t\t\t\tchannels {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport default graphql(directMessageMeQuery, {\n\toptions: (props) => ({\n\t\tvariables: { userId: parseInt(props.match.params.userId, 10) },\n\t\tfetchPolicy: \"network-only\",\n\t}),\n})(DirectMessages);\n","/Users/sannge/Projects/slack/slack_clone_client/src/containers/DirectMessageContainer.js",["135","136"],"/Users/sannge/Projects/slack/slack_clone_client/src/components/DirectMessageModal.js",["137"],"import React from \"react\";\nimport { Form, Input, Modal, Button } from \"semantic-ui-react\";\nimport Downshift from \"downshift\";\n\nimport { useQuery } from \"@apollo/client\";\n\nimport { GET_TEAM_MEMBERS } from \"../graphql/team\";\n\nimport { withRouter } from \"react-router-dom\";\n\nfunction DirectMessageModal({ open, onClose, teamId, history }) {\n\tconst { data, loading, error } = useQuery(GET_TEAM_MEMBERS, {\n\t\tvariables: {\n\t\t\tteamId: parseInt(teamId),\n\t\t},\n\t});\n\n\treturn (\n\t\t<Modal open={open} onClose={onClose}>\n\t\t\t<Modal.Header>Direct Message People in Your Team</Modal.Header>\n\t\t\t<Modal.Content>\n\t\t\t\t<Form>\n\t\t\t\t\t<Form.Field>\n\t\t\t\t\t\t{!loading && (\n\t\t\t\t\t\t\t<Downshift\n\t\t\t\t\t\t\t\tonChange={(selectedUser) => {\n\t\t\t\t\t\t\t\t\thistory.push(`/view-team/user/${teamId}/${selectedUser.id}`);\n\t\t\t\t\t\t\t\t\tonClose();\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t{({\n\t\t\t\t\t\t\t\t\tgetInputProps,\n\t\t\t\t\t\t\t\t\tgetItemProps,\n\t\t\t\t\t\t\t\t\tisOpen,\n\t\t\t\t\t\t\t\t\tinputValue,\n\t\t\t\t\t\t\t\t\tselectedItem,\n\t\t\t\t\t\t\t\t\thighlightedIndex,\n\t\t\t\t\t\t\t\t}) => (\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\t\t\t{...getInputProps({ placeholder: \"Favorite color? \" })}\n\t\t\t\t\t\t\t\t\t\t\tfluid\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t{isOpen ? (\n\t\t\t\t\t\t\t\t\t\t\t<div style={{ border: \"1px solid #ccc\" }}>\n\t\t\t\t\t\t\t\t\t\t\t\t{data?.getTeamMembers\n\t\t\t\t\t\t\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(item) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t!inputValue ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titem.username\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.toLocaleLowerCase()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.includes(inputValue.toLocaleLowerCase())\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.map((item, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{...getItemProps({ item: item })}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={item.id}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thighlightedIndex === index\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? \"lightgray\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: \"white\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfontWeight:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectedItem === item ? \"bold\" : \"normal\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpadding: \"7px\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item.username}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Downshift>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Form.Field>\n\t\t\t\t\t<Button fluid onClick={onClose}>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</Button>\n\t\t\t\t</Form>\n\t\t\t</Modal.Content>\n\t\t</Modal>\n\t);\n}\n\nexport default withRouter(DirectMessageModal);\n","/Users/sannge/Projects/slack/slack_clone_client/src/components/Loading.js",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":14,"column":10,"nodeType":"144","messageId":"145","endLine":14,"endColumn":18},{"ruleId":"142","severity":1,"message":"146","line":2,"column":8,"nodeType":"144","messageId":"145","endLine":2,"endColumn":16},{"ruleId":"142","severity":1,"message":"147","line":3,"column":8,"nodeType":"144","messageId":"145","endLine":3,"endColumn":13},{"ruleId":"142","severity":1,"message":"148","line":6,"column":8,"nodeType":"144","messageId":"145","endLine":6,"endColumn":16},{"ruleId":"149","severity":1,"message":"150","line":10,"column":1,"nodeType":"151","endLine":14,"endColumn":3},{"ruleId":"142","severity":1,"message":"152","line":6,"column":10,"nodeType":"144","messageId":"145","endLine":6,"endColumn":13},{"ruleId":"142","severity":1,"message":"153","line":7,"column":10,"nodeType":"144","messageId":"145","endLine":7,"endColumn":17},{"ruleId":"142","severity":1,"message":"154","line":7,"column":8,"nodeType":"144","messageId":"145","endLine":7,"endColumn":23},{"ruleId":"149","severity":1,"message":"150","line":1,"column":1,"nodeType":"151","endLine":9,"endColumn":9},{"ruleId":"142","severity":1,"message":"155","line":5,"column":2,"nodeType":"144","messageId":"145","endLine":5,"endColumn":16},{"ruleId":"142","severity":1,"message":"146","line":2,"column":8,"nodeType":"144","messageId":"145","endLine":2,"endColumn":16},{"ruleId":"142","severity":1,"message":"147","line":3,"column":8,"nodeType":"144","messageId":"145","endLine":3,"endColumn":13},{"ruleId":"142","severity":1,"message":"148","line":6,"column":8,"nodeType":"144","messageId":"145","endLine":6,"endColumn":16},{"ruleId":"142","severity":1,"message":"156","line":36,"column":10,"nodeType":"144","messageId":"145","endLine":36,"endColumn":17},{"ruleId":"142","severity":1,"message":"157","line":54,"column":4,"nodeType":"144","messageId":"145","endLine":54,"endColumn":10},{"ruleId":"142","severity":1,"message":"158","line":55,"column":4,"nodeType":"144","messageId":"145","endLine":55,"endColumn":10},{"ruleId":"142","severity":1,"message":"159","line":12,"column":25,"nodeType":"144","messageId":"145","endLine":12,"endColumn":30},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Channels' is defined but never used.","'Teams' is defined but never used.","'Messages' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'gql' is defined but never used.","'graphql' is defined but never used.","'normalizeErrors' is defined but never used.","'ApolloProvider' is defined but never used.","'teamIdx' is assigned a value but never used.","'teamId' is assigned a value but never used.","'userId' is assigned a value but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]